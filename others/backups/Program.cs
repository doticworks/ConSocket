#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}
#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}
#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}
#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}
#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}
#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}#region
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using static OtherTest.FileEngine;
#endregion
namespace OtherTest {
    internal class StringClass {
        private string _InputStr = string.Empty;
        public string Set(string str) {
            lock (this) {
                if (str == @"@#") return _InputStr;
                _InputStr = str;
                return _InputStr;
            }
        }
    }
    internal static class Program {
        private const int PackageSize = 1024;
        private const int RecvSlp = 100;
        private const int SentSlp = 100;
        private static string inputStr;
        private static readonly string InputStr = string.Empty;
        private static readonly StringClass Stri = new StringClass();
        private static Queue _RecvMsg;
        private static Queue _SentMsg;
        public static void Main(string[] args) {
            Console.Title = "ConSocket";
            Console.WindowHeight = 20;
            Console.WindowWidth = 56;
            Console.WriteLine("Hello ConSocket!  by Tclauncher");
            Console.WriteLine("Version 1.1");
            Console.WriteLine("Version release---------支持简单聊天,传输文件");
            Console.WriteLine("Con  => Preparing...");
            var chat = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            var mode = 0;
            IPAddress ip;
            IPEndPoint point;
            _RecvMsg = new Queue();
            _SentMsg = new Queue();
            Console.WriteLine("\nSelect Mode:\nn:new socket\t\tc:connect socket\ns:send file\t\tr:receive file \n\n");
            if (args.Length >= 1) {
                Console.WriteLine("");
                Console.WriteLine($"File  => {args[0]}  ||-- Loaded");
            }
            Console.WriteLine("Mode   =>");
            while (mode == 0) {
                var key = Console.ReadKey(true).KeyChar;
                Console.Write('\b');
                if (key == 'n') mode = 1;
                else if (key == 'c') mode = 2;
                else if (key == 's') mode = 3;
                else if (key == 'r') mode = 4;
            }
            switch (mode) {
                case 1:
                case 3: {
                    while (true) {
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("MyIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "d") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true) {
                        Console.Write("MyPort =>");
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch { }
                    }
                    client.Bind(point);
                    client.Listen(10);
                    Console.WriteLine("");
                    Console.Write($"\nIP {point} Waiting Connect");
                    var wat = new Thread(Waiting);
                    wat.Start();
                    chat = client.Accept();
                    wat.Abort();
                    Console.Write("\a");
                    WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                    Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    break;
                }
                case 2:
                case 4:
                    while (true) {
                        Console.Write("MyIP   =>");
                        Console.WriteLine("---Write 'l' in IP 获取本机localhostIP（用于本机测试）");
                        Console.WriteLine("---Write 'p' in IP 获取本机内网IP（同一个路由器下的主机）");
                        Console.WriteLine("---Write 'w' in IP 获取本机外网IP（不同路由器下的主机）");
                        Console.WriteLine("---Write 'd' in IP 连接默认主机\n\n");
                        Console.Write("ConIP   =>");
                        var ipStr = Console.ReadLine();
                        if (ipStr == "l") ipStr = "127.0.0.1";
                        if (ipStr == "l") ipStr = "103.46.128.43";
                        if (ipStr == "p") ipStr = Dns.GetHostAddresses(Dns.GetHostName())[1].ToString();
                        if (ipStr == "w")
                            WriteColor("---获取本机外网ip失败 请手动填写（百度搜“本机ip”就有）", ConsoleColor.Yellow);
                        try {
                            ip = IPAddress.Parse(ipStr);
                            break;
                        }
                        catch {
                            // ignored
                        }
                    }
                    while (true)
                        try {
                            point = new IPEndPoint(ip, int.Parse(Console.ReadLine()));
                            break;
                        }
                        catch {
                            // ignored
                        }
                    var wait = new Thread(Waiting);
                    try {
                        Console.Write("\nConnecting");
                        wait.Start();
                        client.Connect(point);
                        wait.Abort();
                        chat = client;
                        WriteColor($"\a\n\nConnected to IP {point}\n\n", ConsoleColor.Yellow);
                        Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                    }
                    catch (Exception) {
                        wait.Abort();
                        WriteColor("\nIP Not Found   ===   Create Socket with IP? (y/n)", ConsoleColor.Yellow);
                        var input = Console.ReadKey().KeyChar;
                        if (input != 'y') return;
                        if (input == 'y') {
                            client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                            client.Bind(point);
                            client.Listen(10);
                            Console.WriteLine("");
                            Console.Write($"IP {point} Waiting Connect ");
                            wait.Start();
                            chat = client.Accept();
                            wait.Abort();
                            WriteColor($"\a\n\nConnected to IP {chat.RemoteEndPoint}\n\n", ConsoleColor.Yellow);
                            Console.Title = $"ConSocket => {chat.RemoteEndPoint}";
                        }
                    }
                    break;
            }
            switch (mode) {
                case 1:
                case 2: {
                    var showThread = new Thread(() => show(_RecvMsg, Stri));
                    showThread.Start();
                    var inputThread = new Thread(() => input(_SentMsg, Stri));
                    inputThread.Start();
                    var sentThread = new Thread(() => sent(chat, _SentMsg));
                    sentThread.Start();
                    var RecvThread = new Thread(() => recv(chat, _RecvMsg));
                    RecvThread.Start();
                    break;
                }
                case 3: {
                    string filePath;
                    if (args.Length > 0)
                        filePath = args[0];
                    else
                        while (true) {
                            Console.Write("Filepath => ");
                            filePath = Console.ReadLine();
                            if (File.Exists(filePath)) break;
                        }
                    FileSend(filePath, chat);
                    break;
                }
                case 4:
                    FileRecv("", chat);
                    break;
            }
            Console.ReadKey(true);
        }
        private static void input(Queue send, StringClass str) {
            Console.Write("Edit   => ");
            while (true) {
                var inputchar = Console.ReadKey().KeyChar;
                if (inputchar != '\r') str.Set(str.Set(@"@#") + inputchar);
                if (inputchar == '\r') {
                    send.Enqueue(str.Set(@"@#"));
                    Console.WriteLine("Sent   => " + inputStr);
                    str.Set(string.Empty);
                    Console.Write("Edit   => ");
                }
            }
        }
        private static void show(Queue recv, StringClass stri) {
            var recvstr = string.Empty;
            while (true) {
                Thread.Sleep(200);
                if (recv.Count >= 1) {
                    recvstr = recv.Dequeue() as string;
                    int forn;
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write(" ");
                    for (forn = 0; forn <= stri.Set(@"@#").Length + 11; forn++) Console.Write('\u0008');
                    //			Console.WriteLine("");
                    Console.WriteLine("Recv   => " + recvstr);
                    Console.Write("Edit   => " + stri.Set(@"@#"));
                }
            }
        }
        private static void sent(Socket socket, Queue sent) {
            var sentmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            while (true) {
                Thread.Sleep(200);
                if (sent.Count >= 1) {
                    sentmsg = sent.Dequeue() as string;
                    buffer = Encoding.UTF8.GetBytes(sentmsg);
                    try {
                        socket.Send(buffer);
                    }
                    catch (Exception) { }
                }
            }
        }
        private static void recv(Socket socket, Queue recv) {
            var recvmsg = string.Empty;
            var buffer = new byte[1024 * 1024];
            var n = 1;
            var working = 1;
            while (working == 1) {
                Thread.Sleep(200);
                try {
                    n = socket.Receive(buffer);
                }
                catch (Exception) {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("");
                    Console.WriteLine("");
                    Console.WriteLine("Connection Failed");
                    Console.ForegroundColor = ConsoleColor.White;
                    working = 0;
                }
                recvmsg = Encoding.UTF8.GetString(buffer, 0, n);
                recv.Enqueue(recvmsg);
            }
        }
    }
}